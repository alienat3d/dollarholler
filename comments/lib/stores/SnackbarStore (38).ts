// 38.4 Это хранилище будет чуточку отличаться от двух других.
import { writable } from 'svelte/store';
import { v4 as uuidv4 } from 'uuid';

// 38.5 Дальше, используя деструктуризацию из writable извлечём "update" и "subscribe".
// 38.7 Поместим этот новый тип массива в writable.
// 38.8.0 Также нам понадобятся здесь какие-то функции: начнём с "send", которая будет отправлять сообщения в комп. Snackbar. Итак внутри нам понадобится константа для нового контента, которая будет объектом, содержащим собственно передаваемый контент из сообщения и типа, а также к ним будет добавляться уникальный id, который нам сгенерирует либа uuidv4.
// 38.8.1 Далее мы обновляем с помощью метода "update", которые принимает состояние старого хранилища и возвращает новое состояние хранилища, которое будет массивом со всем старым содержимым хранилища, которое добавим с помощью спред-оператора и к нему добавим содержимое newContent.
// 38.9.0 Также нам нужна функция "remove", чтобы удалять контент из Snackbar комп. В которую нам понадобится передать id для указания конкретного Snackbar-сообщения, которое нужно удалить. А также укажем, что id может и не быть и по умолчанию присвоим ему значение null. Дальше внутри у нас также метод "update", который принимает прежнее состояние store, а дальше пишем условие, что если есть id, то тогда мы возвращаем все сообщения, кроме того, что совпадает с этим id. С этим отлично справляется метод перебора "filter".
// 38.9.1 Далее мы деструктурируем store на первый & остальные элементы. Но на самом деле нам не нужно использовать первый, поэтому мы можем его не указывать, а просто оставить ",". Т.о. мы вернём все элементы, кроме первого.
// 38.9.2 Также не забудем вернуть из функции "send, remove & subscribe", а экспортировать наружу мы будем переменную, которая будет содержать результат работы функции newSnackbar.
// Go to [src\lib\components\Snackbar.svelte]
const newSnackbar = () => {
  const { update, subscribe } = writable<Snackbar[]>([]);

  function send(content: { message: string; type: NotificationType }) {
    const newContent = { id: uuidv4(), ...content };
    update((store) => [...store, newContent]);
  }

  function remove(id: string | null = null) {
    update((store) => {
      if (id) return store.filter((item) => item.id !== id);

      const [, ...rest] = store;

      return [...rest];
    });
  }

  return { send, remove, subscribe };
};

export const snackbar = newSnackbar();
